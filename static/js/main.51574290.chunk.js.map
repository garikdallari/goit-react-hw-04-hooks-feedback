{"version":3,"sources":["Components/Section/Section.jsx","Components/Statistics/Statistics.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Notification/Notification.jsx","App.js","index.js"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","feedback","type","onClick","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","target","dataset","action","prev","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAgBeA,MAbf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,gCACE,6BAAKD,IACJC,MCeQC,MAnBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YCcSC,MArBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAEEC,KAAK,SACL,cAAaD,EACbE,QAASJ,EAJX,SAMGE,GALIA,SCCAG,MAPf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KC0DEC,MAvDf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOf,EAAP,KAAagB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOd,EAAP,KAAgBgB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOb,EAAP,KAAYgB,EAAZ,KAEMC,EAAqB,WACzB,OAAOnB,EAAOC,EAAUC,GAyB1B,OACE,eAAC,EAAD,CAASL,MAAM,wBAAf,UACE,cAAC,EAAD,CACES,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAtBiB,SAACa,GAGtB,OAFaA,EAAEC,OAAOC,QAAQC,QAG5B,IAAK,OACHP,GAAQ,SAACQ,GAAD,OAAUA,EAAO,KACzB,MACF,IAAK,UACHP,GAAW,SAACO,GAAD,OAAUA,EAAO,KAC5B,MACF,IAAK,MACHN,GAAO,SAACM,GAAD,OAAUA,EAAO,KACxB,MACF,QACE,WAUF,gCACE,4CACCxB,EAAO,GAAKC,EAAU,GAAKC,EAAM,EAChC,cAAC,EAAD,CACEF,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgB,IACPf,mBAnCDqB,KAAKC,MAAO1B,EAAOmB,IAAwB,OAsC5C,cAAC,EAAD,CAAcN,QAAQ,6BCjDhCc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.51574290.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}% </p>\n    </>\n  );\n}\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <div>\n      {options.map((feedback) => (\n        <button\n          key={feedback}\n          type=\"button\"\n          data-action={feedback}\n          onClick={onLeaveFeedback}\n        >\n          {feedback}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nfunction Notification({ message }) {\n  return <p>{message}</p>;\n}\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import { React, useState } from \"react\";\nimport Section from \"./Components/Section/Section\";\nimport Statistics from \"./Components/Statistics/Statistics\";\nimport FeedbackOptions from \"./Components/FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./Components/Notification/Notification\";\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good / countTotalFeedback()) * 100);\n  };\n\n  const handleFeedback = (e) => {\n    const name = e.target.dataset.action;\n\n    switch (name) {\n      case \"good\":\n        setGood((prev) => prev + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prev) => prev + 1);\n        break;\n      case \"bad\":\n        setBad((prev) => prev + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <Section title=\"Please leave feedback\">\n      <FeedbackOptions\n        options={[\"good\", \"neutral\", \"bad\"]}\n        onLeaveFeedback={handleFeedback}\n      />\n      <div>\n        <h2>Statistics</h2>\n        {good > 0 || neutral > 0 || bad > 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </div>\n    </Section>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}